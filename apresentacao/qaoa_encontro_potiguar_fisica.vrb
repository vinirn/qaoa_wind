\frametitle{CÃ³digo: Hamiltoniano de custo}
\vspace{-4pt}
\begin{lstlisting}[language=Python,style=codeblock]
def create_cost_hamiltonian():
  pauli_list = []
  const_offset = 0.0

  for i in range(optimizer.n_positions):
    pauli_list.append(("Z", [i], score[i]/2))
    const_offset += -score[i]/2

  for (i, j), wake_penalty in wake_penalties.items():
    pauli_list.append(("ZZ", [i, j],  wake_penalty/4))
    pauli_list.append(("Z",  [i],    -wake_penalty/4))
    pauli_list.append(("Z",  [j],    -wake_penalty/4))
    const_offset += wake_penalty/4

  if abs(const_offset) > 0:
    pauli_list.append(("I", [], const_offset))

  return SparsePauliOp.from_sparse_list
    (pauli_list, num_qubits=optimizer.n_positions)
\end{lstlisting}
