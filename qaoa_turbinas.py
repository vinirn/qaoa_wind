#!/usr/bin/env python3
"""
QAOA para Otimiza√ß√£o de Turbinas E√≥licas - Qiskit 2.x
Implementa√ß√£o moderna usando as APIs mais recentes
Sistema configur√°vel via arquivo JSON
"""

import numpy as np
import json
import os
import sys
import csv
from datetime import datetime
from utils import (parse_arguments, list_available_configs, load_config, get_config_file,
                   validate_constraints, evaluate_solution, show_active_penalties, 
                   bitstring_to_grid, display_grid, display_interference_matrix, plot_cost_evolution,
                   plot_gamma_beta_trajectory, create_grid_visualization,
                   load_ibm_api_key, load_ibm_config, confirm_ibm_execution, plot_quantum_circuit)

# Controle global simples para gating de plots quando fun√ß√£o utilit√°ria √© usada
PLOT_ENABLED = False
from qiskit.quantum_info import SparsePauliOp
from qiskit import QuantumCircuit
from qiskit.circuit import Parameter
from qiskit_aer.primitives import EstimatorV2
from scipy.optimize import minimize

class QAOATurbineOptimizer:
    def __init__(self, config_file="config.json"):
        """Inicializa o otimizador com configura√ß√µes do arquivo"""
        self.config = load_config(config_file)
        
        # Extrair par√¢metros principais
        self.rows = self.config["grid"]["rows"]
        self.cols = self.config["grid"]["cols"]
        self.n_positions = self.rows * self.cols
        self.wind_direction = tuple(self.config["wind"]["direction"])
        # Suporte para nomenclatura antiga e nova
        if "wake_effects" in self.config:
            self.max_penalty = self.config["wake_effects"]["base_penalty"]
            self.decay_factor = self.config["wake_effects"]["distance_decay"]
        else:
            # Compatibilidade com configs antigos
            self.max_penalty = self.config["penalties"]["max_penalty"]
            self.decay_factor = self.config["penalties"]["decay_factor"]
        
        # NOVO: Restri√ß√µes de turbinas
        constraints = self.config.get("constraints", {})
        
        # Tratar valores null corretamente
        min_turbines_raw = constraints.get("min_turbines", None)
        max_turbines_raw = constraints.get("max_turbines", None)
        
        self.min_turbines = min_turbines_raw if min_turbines_raw is not None else 0
        self.max_turbines = max_turbines_raw if max_turbines_raw is not None else self.n_positions
        self.enforce_constraints = constraints.get("enforce_constraints", False)
        
        # Buscar constraint_penalty em constraints primeiro, depois em penalties
        self.constraint_penalty = constraints.get("constraint_penalty", 
                                                 self.config.get("penalties", {}).get("constraint_penalty", 10.0))
        
        print("=== QAOA Configur√°vel para Turbinas E√≥licas ===\n")
        print(f"üìê Grid: {self.rows}x{self.cols} ({self.n_positions} posi√ß√µes)")
        print(f"üå¨Ô∏è  Vento: {self.wind_direction}")
        print(f"‚ö° Penalidade base para esteira: {self.max_penalty}")
        
        # NOVO: Mostrar restri√ß√µes de forma destacada
        print(f"\nüéØ RESTRI√á√ïES DE N√öMERO DE TURBINAS:")
        if self.enforce_constraints:
            print(f"   ‚úÖ Restri√ß√µes ATIVAS")
            print(f"   üìä M√≠nimo: {self.min_turbines} turbinas")
            print(f"   üìä M√°ximo: {self.max_turbines} turbinas")
            if self.min_turbines == self.max_turbines:
                print(f"   üéØ N√∫mero EXATO exigido: {self.min_turbines} turbinas")
            print(f"   ‚ö†Ô∏è  Penalidade por viola√ß√£o: {self.constraint_penalty}")
        else:
            print(f"   ‚ùå Restri√ß√µes DESATIVADAS")
            print(f"   üìä M√≠nimo: 0 turbinas (sem restri√ß√£o)")
            print(f"   üìä M√°ximo: {self.n_positions} turbinas (sem restri√ß√£o)")
        self.setup_grid()
        self.setup_score()
        self.wake_penalties = self.calculate_wake_penalties()
        
        
    def setup_grid(self):
        """Configura as coordenadas do grid"""
        self.positions_coords = {}
        for i in range(self.n_positions):
            row = i // self.cols
            col = i % self.cols
            self.positions_coords[i] = (row, col)
            
    def setup_score(self):
        """Configura o score por posi√ß√£o"""
        score_config = self.config["score"]
        mode = score_config["mode"]
        
        if mode == "fixed":
            self.score = score_config["values"][:self.n_positions]
            # Preencher com zeros se necess√°rio
            while len(self.score) < self.n_positions:
                self.score.append(0.0)
        elif mode == "random":
            min_val, max_val = score_config["random_range"]
            np.random.seed(42)  # Seed fixo para reprodutibilidade
            self.score = np.random.uniform(min_val, max_val, self.n_positions).tolist()
        elif mode == "uniform":
            uniform_value = score_config.get("uniform_value", 4.0)
            self.score = [uniform_value] * self.n_positions
        else:
            raise ValueError(f"Modo de score inv√°lido: {mode}")
            
        print(f"üíØ Score por posi√ß√£o: {[f'{s:.1f}' for s in self.score]}")
        
        
    def calculate_wake_penalties(self):
        """Calcula penalidades de esteira tradicional - mesma linha apenas"""
        penalties = {}
        
        for i in range(self.n_positions):
            for j in range(self.n_positions):
                if i != j:
                    coord1 = self.positions_coords[i]
                    coord2 = self.positions_coords[j]
                    
                    # Calcular diferen√ßas baseadas na dire√ß√£o do vento
                    if self.wind_direction == (0, 1):  # oeste‚Üíleste
                        dx = coord2[1] - coord1[1]  # diferen√ßa leste-oeste
                        dy = coord2[0] - coord1[0]  # diferen√ßa norte-sul
                        
                        # Turbina j deve estar a leste de turbina i NA MESMA LINHA
                        if dx > 0 and dy == 0:  # mesma linha (dy = 0)
                            distance = abs(dx)
                            penalty = max(0, self.max_penalty - distance * self.decay_factor)
                            if penalty > 0:
                                penalties[(i, j)] = penalty
                    
                    elif self.wind_direction == (1, 0):  # norte‚Üísul
                        dx = coord2[0] - coord1[0]  # diferen√ßa norte-sul
                        dy = coord2[1] - coord1[1]  # diferen√ßa leste-oeste
                        
                        # Turbina j deve estar ao sul de turbina i NA MESMA COLUNA
                        if dx > 0 and dy == 0:  # mesma coluna (dy = 0)
                            distance = abs(dx)
                            penalty = max(0, self.max_penalty - distance * self.decay_factor)
                            if penalty > 0:
                                penalties[(i, j)] = penalty
        
        return penalties

def generate_csv_filename(config):
    """Gera nome do arquivo CSV baseado na configura√ß√£o"""
    # Extrair informa√ß√µes da configura√ß√£o
    grid_size = f"{config['grid']['rows']}x{config['grid']['cols']}"
    
    # Dire√ß√£o do vento
    wind_dir = config["wind"]["direction"]
    if wind_dir == [0, 1]:
        wind_suffix = "oeste_leste"
    elif wind_dir == [1, 0]:
        wind_suffix = "norte_sul"
    else:
        wind_suffix = f"dir_{wind_dir[0]}_{wind_dir[1]}"
    
    # Modo do score
    score_mode = config["score"]["mode"]
    
    # Restri√ß√µes
    constraints = config.get("constraints", {})
    enforce_constraints = constraints.get("enforce_constraints", False)
    constraints_suffix = "com_restricoes" if enforce_constraints else "sem_restricoes"
    
    # Nome do arquivo
    filename = f"qaoa_resultados_{grid_size}_{wind_suffix}_{score_mode}_{constraints_suffix}.csv"
    return filename

def log_simulation_results(config, config_file, optimal_value, best_bitstring, cost_history, counts, execution_time):
    """Registra os resultados da simula√ß√£o no arquivo CSV apropriado"""
    
    # Criar pasta de resultados se n√£o existir
    results_dir = "resultados_simulacoes"
    if not os.path.exists(results_dir):
        os.makedirs(results_dir)
        print(f"üìÅ Pasta {results_dir} criada")
    
    # Gerar nome do arquivo CSV
    csv_filename = generate_csv_filename(config)
    csv_path = os.path.join(results_dir, csv_filename)
    
    # Verificar se arquivo existe para decidir se adiciona cabe√ßalho
    file_exists = os.path.exists(csv_path)
    
    # Extrair par√¢metros para logging
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Par√¢metros do grid e wind
    rows = config["grid"]["rows"]
    cols = config["grid"]["cols"]
    wind_direction = config["wind"]["direction"]
    
    # Wake effects/penalties
    if "wake_effects" in config:
        base_penalty = config["wake_effects"]["base_penalty"]
        distance_decay = config["wake_effects"]["distance_decay"]
    else:
        base_penalty = config["penalties"]["max_penalty"]
        distance_decay = config["penalties"]["decay_factor"]
    
    # Score parameters
    score_config = config["score"]
    score_mode = score_config["mode"]
    uniform_value = score_config.get("uniform_value", None) if score_mode == "uniform" else None
    
    # QAOA parameters
    qaoa_config = config["qaoa"]
    layers = qaoa_config["layers"]
    optimizer_name = qaoa_config["optimizer"]
    maxiter = qaoa_config.get("optimizer_options", {}).get("maxiter", None)
    rhobeg = qaoa_config.get("optimizer_options", {}).get("rhobeg", None)
    shots = qaoa_config["shots"]
    gamma_range_str = qaoa_config.get("gamma_range", qaoa_config.get("initial_param_range", "2*pi"))
    beta_range_str = qaoa_config.get("beta_range", qaoa_config.get("initial_param_range", "pi"))
    
    # Constraints parameters
    constraints = config.get("constraints", {})
    enforce_constraints = constraints.get("enforce_constraints", False)
    min_turbines = constraints.get("min_turbines", None)
    max_turbines = constraints.get("max_turbines", None)
    constraint_penalty = constraints.get("constraint_penalty", None)
    
    # Solution analysis
    solution = bitstring_to_grid(best_bitstring)
    num_turbines = sum(solution)
    best_count = counts[best_bitstring]
    best_probability = best_count / sum(counts.values())
    
    # Calcular scores
    optimizer_obj = QAOATurbineOptimizer(config_file)
    total_score = sum(solution[i] * optimizer_obj.score[i] for i in range(len(solution)))
    
    # Penalidades de esteira ativas e contagem de turbinas com penalty
    total_wake_penalty = 0
    turbines_with_penalty = set()  # Usar set para evitar duplicatas
    
    for (i, j), penalty in optimizer_obj.wake_penalties.items():
        if solution[i] == 1 and solution[j] == 1:
            total_wake_penalty += penalty
            # Apenas turbina downstream (j) sofre efeito da esteira
            turbines_with_penalty.add(j)
    
    num_turbines_with_penalty = len(turbines_with_penalty)
    
    # Calcular rela√ß√£o turbinas com penalty / turbinas totais
    penalty_ratio = num_turbines_with_penalty / num_turbines if num_turbines > 0 else 0
    
    net_score = total_score - total_wake_penalty
    
    # Preparar linha de dados
    row_data = [
        timestamp,
        config_file,
        f"{rows}x{cols}",
        f"{wind_direction[0]}-{wind_direction[1]}",
        base_penalty,
        distance_decay,
        score_mode,
        uniform_value if uniform_value is not None else "",
        layers,
        optimizer_name,
        maxiter if maxiter is not None else "",
        rhobeg if rhobeg is not None else "",
        shots,
        gamma_range_str,
        beta_range_str,
        enforce_constraints,
        min_turbines if min_turbines is not None else "",
        max_turbines if max_turbines is not None else "",
        constraint_penalty if constraint_penalty is not None else "",
        best_bitstring,
        f"{best_probability:.6f}",
        optimal_value,
        total_score,
        total_wake_penalty,
        net_score,
        len(cost_history),
        f"{execution_time:.2f}",
        min(cost_history) if cost_history else "",
        max(cost_history) if cost_history else "",
        cost_history[-1] if cost_history else "",
        num_turbines,
        num_turbines_with_penalty,
        f"{penalty_ratio:.6f}"
    ]
    
    # Cabe√ßalho do CSV
    header = [
        "timestamp",
        "config_file", 
        "grid_size",
        "wind_direction",
        "base_penalty",
        "distance_decay", 
        "score_mode",
        "uniform_value",
        "layers",
        "optimizer",
        "maxiter",
        "rhobeg", 
        "shots",
        "gamma_range",
        "beta_range", 
        "enforce_constraints",
        "min_turbines",
        "max_turbines", 
        "constraint_penalty",
        "best_bitstring",
        "best_probability",
        "optimal_value",
        "total_score",
        "wake_penalty",
        "net_score",
        "iterations", 
        "execution_time_s",
        "min_cost",
        "max_cost",
        "final_cost",
        "num_turbines",
        "turbines_with_penalty",
        "penalty_ratio"
    ]
    
    # Escrever no arquivo CSV
    with open(csv_path, 'a', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        
        # Adicionar cabe√ßalho se arquivo novo
        if not file_exists:
            writer.writerow(header)
            print(f"üìù Novo arquivo CSV criado: {csv_path}")
        
        # Adicionar dados
        writer.writerow(row_data)
        print(f"‚úÖ Resultados salvos em: {csv_path}")
        print(f"   ‚Ä¢ Timestamp: {timestamp}")
        print(f"   ‚Ä¢ Configura√ß√£o: {config_file}")
        print(f"   ‚Ä¢ Score l√≠quido: {net_score:.2f}")
        print(f"   ‚Ä¢ Turbinas com penalty: {num_turbines_with_penalty}/{num_turbines} ({penalty_ratio:.1%})")

def run_optimization(optimizer):
    """Executa a otimiza√ß√£o QAOA"""
    # Definir vari√°veis globais para compatibilidade
    global score, positions_coords, wake_penalties
    score = optimizer.score
    positions_coords = optimizer.positions_coords
    wake_penalties = optimizer.wake_penalties

    print(f"\nMATRIZ DE INTERFER√äNCIA (penalidades SE ambas turbinas estiverem instaladas):")
    wind_desc = "Oeste ‚Üí Leste" if optimizer.wind_direction == (0, 1) else "Norte ‚Üí Sul"
    print(f"Dire√ß√£o do vento: {wind_desc}")
    print()

    # Mostrar de forma mais clara com coordenadas
    for (i, j), penalty in wake_penalties.items():
        coord1 = positions_coords[i]
        coord2 = positions_coords[j]
        print(f"  Posi√ß√£o {coord1} ‚Üí Posi√ß√£o {coord2}: penalidade {penalty}")
        
    print(f"\nTotal de {len(wake_penalties)} poss√≠veis interfer√™ncias no grid {optimizer.rows}x{optimizer.cols}")

    # Executar QAOA
    try:
        # Obter maxiter das op√ß√µes do otimizador ou usar padr√£o
        max_iter = optimizer.config["qaoa"].get("optimizer_options", {}).get("maxiter", 50)
        counts, optimal_value, cost_history, execution_time, param_hist = run_qaoa(p=optimizer.config["qaoa"]["layers"], max_iter=max_iter, use_ibm_quantum=False, args=None, config_file=config_file)
        
        # Gerar gr√°fico de evolu√ß√£o do custo (condicionado)
        if PLOT_ENABLED:
            plot_cost_evolution(cost_history, config_file, rhobeg=param_hist.get('rhobeg'))
        
        analyze_results(counts)
        
        # Trajet√≥ria Œ≥-Œ≤ (condicionado)
        if PLOT_ENABLED:
            try:
                from utils import plot_gamma_beta_trajectory as _plot_traj
                _plot_traj(param_hist.get("gamma_history", []), param_hist.get("beta_history", []), config_file, rhobeg=param_hist.get('rhobeg'))
            except Exception:
                pass
        
    except Exception as e:
        print(f"‚ùå ERRO DETALHADO NA EXECU√á√ÉO DO QAOA:")
        print(f"   ‚Ä¢ Tipo do erro: {type(e).__name__}")
        print(f"   ‚Ä¢ Mensagem: {str(e)}")
        
        # Mostrar traceback completo para debug
        import traceback
        print(f"   ‚Ä¢ Stack trace:")
        traceback.print_exc()
        
        print("\nüíî Execu√ß√£o interrompida devido ao erro.")
        sys.exit(1)

# Instanciar o otimizador com arquivo apropriado
config_file = get_config_file()
optimizer = QAOATurbineOptimizer(config_file)

# Exibir matriz de interfer√™ncias se configurado
if optimizer.config.get("display", {}).get("show_interference_matrix", True):
    display_interference_matrix(optimizer)
else:
    print("üìä Matriz de interfer√™ncias: OCULTA (configurado no JSON)")
    print(f"Total de {len(optimizer.wake_penalties)} poss√≠veis interfer√™ncias no grid {optimizer.rows}x{optimizer.cols}")

# Manter compatibilidade com c√≥digo existente
score = optimizer.score
positions_coords = optimizer.positions_coords
wake_penalties = optimizer.wake_penalties

def create_cost_hamiltonian():
    """
    Cria o Hamiltoniano de custo para QAOA.
    
    Objetivo: Maximizar (score - wake_penalties) = Minimizar -(score - wake_penalties)
    
    PROBLEMA IDENTIFICADO: O termo ZZ penaliza estados incorretos:
    - |00‚ü©: ZZ = +1 ‚Üí penaliza (sem turbinas, n√£o deveria penalizar)
    - |01‚ü©: ZZ = -1 ‚Üí recompensa (uma turbina, n√£o deveria recompensar) 
    - |10‚ü©: ZZ = -1 ‚Üí recompensa (uma turbina, n√£o deveria recompensar)
    - |11‚ü©: ZZ = +1 ‚Üí penaliza (ambas turbinas, CORRETO)
    
    SOLU√á√ÉO: Reformular para penalizar apenas |11‚ü© = turbinas i e j ambas presentes.
    """
    pauli_list = []
    const_offset = 0.0  # OTIMIZA√á√ÉO: Acumular termos I para reduzir overhead
    
    # Termos lineares (score): -score[i] * Z[i] 
    for i in range(optimizer.n_positions):
        print(i,":",score[i])
        # |0‚ü©: Z = +1 ‚Üí penaliza
        # |1‚ü©: Z = -1 ‚Üí recompensa 
        # |any‚ü©: -I = -1 ‚Üí recompensa
        pauli_list.append(("Z", [i], +score[i]/2)) #|0‚ü©:+score/2, |1‚ü©:-score/2 , negativo para recompensar
        const_offset += -score[i]/2 #termo global negativo para recompensar (acumulado)
    
    # OP√á√ÉO 1: Corre√ß√£o completa para penalizar apenas |11‚ü©
    # Para cada par de turbinas com wake interference:
    
    for (i, j), wake_penalty in wake_penalties.items():
        print(i,",",j,":",wake_penalty)
              
        pauli_list.append(("ZZ", [i, j], wake_penalty/4))  # penaliza |00‚ü© e |11‚ü©   
        pauli_list.append(("Z", [i], -wake_penalty/4))     # penaliza |1*‚ü©   Z1|0*‚ü©=+|0*‚ü©   Z1|1*‚ü©=-|1*‚ü©, por issoo sinal de menos
        pauli_list.append(("Z", [j], -wake_penalty/4))     # penaliza |*1‚ü©
        const_offset += wake_penalty/4  # termo global positivo para penalizar (acumulado)
    
    # Adicionar √∫nico termo I com offset total
    if abs(const_offset) > 1e-10:  # Evitar termo zero
        pauli_list.append(("I", [], const_offset))
        print(f"Termo constante total acumulado: {const_offset:.3f}")
    
    return SparsePauliOp.from_sparse_list(pauli_list, num_qubits=optimizer.n_positions)

def params_array_to_dict(params_array, ansatz):
    """Converte array de par√¢metros para dicion√°rio usando ordem do circuito"""
    circuit_params = list(ansatz.parameters)
    return {param: params_array[i] for i, param in enumerate(circuit_params)}

def objective_function_with_constraints(params, estimator, ansatz, cost_hamiltonian, simple_sampler):
    """Fun√ß√£o objetivo que inclui penalty din√¢mica para restri√ß√µes min/max turbinas"""
    
    # 1. Calcula energia do Hamiltoniano (QAOA normal)
    # CORRE√á√ÉO CR√çTICA: Usar binding por dicion√°rio no Estimator
    param_dict = params_array_to_dict(params, ansatz)
    job = estimator.run([(ansatz, cost_hamiltonian, param_dict)])
    result = job.result()
    qaoa_energy = result[0].data.evs  # Valor de expectativa (j√° √© escalar)
    
    # 2. Se restri√ß√µes n√£o est√£o ativas, retorna energia normal
    if not optimizer.enforce_constraints:
        return qaoa_energy
    
    # 3. Extrai distribui√ß√£o completa para calcular penalty esperada
    quasi_dist = simple_sampler(ansatz, params)
       
    # 4. Calcula penalty esperada sobre TODA a distribui√ß√£o (mais est√°vel)
    expected_penalty = 0
    
    for config, probability in quasi_dist.items():
        # Conta turbinas nesta configura√ß√£o
        num_turbines = bin(config).count('1')        
        # Calcula penalty para esta configura√ß√£o
        config_penalty = 0
        if num_turbines < optimizer.min_turbines:
            violation = optimizer.min_turbines - num_turbines
            config_penalty = optimizer.constraint_penalty * violation**2
        elif num_turbines > optimizer.max_turbines:
            violation = num_turbines - optimizer.max_turbines
            config_penalty = optimizer.constraint_penalty * violation**2
        
        # Adiciona penalty ponderada pela probabilidade
        expected_penalty += probability * config_penalty
        
    #print(qaoa_energy)
    #print(expected_penalty)
    
    # 5. Retorna energia + penalty esperada (minimiza√ß√£o)
    return qaoa_energy + expected_penalty

# Importar time para benchmarking
import time
    
# 4. FUN√á√ÉO AUXILIAR PARA VALIDAR RESTRI√á√ïES

def create_qaoa_ansatz(cost_hamiltonian, p):
    """Cria o ansatz QAOA manualmente para compatibilidade com EstimatorV2"""
    n_qubits = cost_hamiltonian.num_qubits
    
    # Criar circuito
    circuit = QuantumCircuit(n_qubits)
    
    # Estado inicial: superposi√ß√£o uniforme
    for i in range(n_qubits):
        circuit.h(i)
    
    # Par√¢metros QAOA
    gammas = [Parameter(f'gamma_{i}') for i in range(p)]
    betas = [Parameter(f'beta_{i}') for i in range(p)]
    
    # Camadas QAOA
    for layer in range(p):
        # Aplicar operador de custo (problema-dependente)
        # Para cada termo no Hamiltoniano
        for pauli, coeff in cost_hamiltonian.to_list():
            #print(pauli)
            #print(coeff)
            # CORRE√á√ÉO: Verificar ZZ primeiro, depois Z
            if pauli.count('Z') == 2:  # Termos ZZ (dois qubits)
                qubits = [i for i, op in enumerate(pauli) if op == 'Z']
                if len(qubits) == 2:
                    circuit.rzz(2 * gammas[layer] * coeff.real, qubits[0], qubits[1])
            elif 'Z' in pauli:  # Termos Z (single qubit)
                for i, op in enumerate(pauli):
                    if op == 'Z':
                        circuit.rz(2 * gammas[layer] * coeff.real, i)
        
        # Aplicar operador de mistura (X rotations)
        for i in range(n_qubits):
            circuit.rx(2 * betas[layer], i)
    
    return circuit

  



def run_qaoa(p, max_iter=50, use_ibm_quantum=False, args=None, config_file=None):
    """Executa o algoritmo QAOA usando APIs modernas"""
    print(f"\nConfigurando QAOA com p={p} camadas...")
    
    # Marcar in√≠cio do tempo de execu√ß√£o
    start_time = time.time()
    
    # Criar Hamiltoniano e ansatz
    cost_hamiltonian = create_cost_hamiltonian()
    ansatz = create_qaoa_ansatz(cost_hamiltonian, p)
    
    print(f"Ansatz criado com {ansatz.num_qubits} qubits e {len(ansatz.parameters)} par√¢metros")
    
    # Plotar circuito qu√¢ntico se solicitado
    if args and getattr(args, 'plot_quantum', False):
        plot_quantum_circuit(ansatz, config_file or 'config.json')
    
    # Configurar EstimatorV2 baseado no modo
    shots = optimizer.config.get("qaoa", {}).get("shots", 1024)
    
    if use_ibm_quantum:
        try:
            from qiskit_ibm_runtime import EstimatorV2 as IBMEstimatorV2, QiskitRuntimeService
            
            # Carregar configura√ß√µes IBM
            api_key = load_ibm_api_key()
            ibm_config = load_ibm_config()
            
            # Usar configura√ß√µes do ibm.json
            instance = ibm_config['instance']
            primary_backend = ibm_config['backends']['primary']
            fallback_backend = ibm_config['backends']['fallback']
            
            # Salvar credenciais com inst√¢ncia
            QiskitRuntimeService.save_account(
                token=api_key, 
                instance=instance,
                overwrite=True
            )
            
            # Conectar especificando a inst√¢ncia
            service = QiskitRuntimeService(instance=instance)
            
            # Tentar backend prim√°rio primeiro, depois fallback
            try:
                backend = service.backend(primary_backend)
                print(f"   üéØ Usando backend prim√°rio: {primary_backend}")
            except:
                backend = service.backend(fallback_backend)
                print(f"   üîÑ Fallback para: {fallback_backend}")
            # Criar EstimatorV2 com configura√ß√µes de shots
            estimator = IBMEstimatorV2(mode=backend, options={"default_shots": shots})
            
            print(f"üåê Conectado ao IBM Quantum: {backend.name}")
            print(f"   ‚Ä¢ Qubits dispon√≠veis: {backend.configuration().num_qubits}")
            print(f"   ‚Ä¢ Status: {backend.status().status_msg}")
            print(f"   ‚Ä¢ Shots por itera√ß√£o: {shots}")
            print(f"   ‚Ä¢ Transpila√ß√£o autom√°tica: n√≠vel 3")
            
        except ImportError:
            print("‚ùå qiskit-ibm-runtime n√£o encontrado. Execute: pip install qiskit-ibm-runtime")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå Erro ao conectar com IBM Quantum: {e}")
            sys.exit(1)
    else:
        # Modo simula√ß√£o local
        estimator = EstimatorV2()
        estimator.options.default_shots = shots
        
        # Configurar n√∫mero de threads do AER se especificado
        aer_config = optimizer.config.get("aer", {})
        max_threads = aer_config.get("max_parallel_threads", None)
        
        if max_threads is not None:
            estimator.options.backend_options = {"max_parallel_threads": max_threads}
            print(f"üñ•Ô∏è  Usando simula√ß√£o local com {shots} shots e {max_threads} threads")
        else:
            print(f"üñ•Ô∏è  Usando simula√ß√£o local com {shots} shots (threads autom√°tico)")
    
    # Para IBM Quantum, usar transpila√ß√£o manual recomendada pela IBM
    if use_ibm_quantum:
        from qiskit.transpiler.preset_passmanagers import generate_preset_pass_manager
        
        # Usar n√≠vel de otimiza√ß√£o do ibm.json
        opt_level = ibm_config.get('transpilation', {}).get('optimization_level', 3)
        pm = generate_preset_pass_manager(backend=backend, optimization_level=opt_level)
        ansatz = pm.run(ansatz)
        print(f"   ‚öôÔ∏è  Transpila√ß√£o: n√≠vel {opt_level}")
        
        # Expandir o Hamiltoniano para match com o n√∫mero de qubits do circuito transpilado
        n_qubits_transpiled = ansatz.num_qubits
        if n_qubits_transpiled > cost_hamiltonian.num_qubits:
            # Criar Hamiltoniano expandido corretamente
            extra_qubits = n_qubits_transpiled - cost_hamiltonian.num_qubits
            identity_op = SparsePauliOp.from_list([("I" * extra_qubits, 1.0)])
            cost_hamiltonian = cost_hamiltonian.tensor(identity_op)
            print(f"   ‚Ä¢ Hamiltoniano expandido de {optimizer.n_positions} para {n_qubits_transpiled} qubits")
        
        print(f"‚úÖ Circuito transpilado para {backend.name} usando preset pass manager")
        
    # Contador para acompanhar itera√ß√µes e hist√≥rico de custos
    iteration_count = [0]  # Lista para permitir modifica√ß√£o dentro da fun√ß√£o aninhada
    cost_history = []  # Lista para armazenar hist√≥rico de custos
    # Hist√≥rico Œ≥/Œ≤ por camada (preparado ap√≥s detectar ordem dos params)
    gamma_indices = []
    beta_indices = []
    gamma_history = None
    beta_history = None
    
    def cost_function(params):
        """Fun√ß√£o de custo com penalty din√¢mica para restri√ß√µes"""
        iteration_count[0] += 1
        
        # Usar nossa nova fun√ß√£o com penalidades din√¢micas
        # Criar sampler simples baseado no simulador existente
        from qiskit_aer import AerSimulator
        from qiskit import transpile
        
        def simple_sampler(ansatz, params):
            # CORRE√á√ÉO: Usar binding por dicion√°rio para garantir ordem correta
            # Converter array para dicion√°rio usando ordem expl√≠cita do circuito
            param_dict = params_array_to_dict(params, ansatz)
            circuit = ansatz.assign_parameters(param_dict)
            circuit.measure_all()
            
            if use_ibm_quantum:
                # Usar IBM Quantum
                from qiskit import transpile
                from qiskit_ibm_runtime import SamplerV2
                
                sampler = SamplerV2(mode=backend)
                opt_level = ibm_config.get('transpilation', {}).get('optimization_level', 3)
                transpiled = transpile(circuit, backend, optimization_level=opt_level)
                job = sampler.run([transpiled], shots=shots)
                result = job.result()
                counts = result[0].data.meas.get_counts()
            else:
                # Simular localmente com configura√ß√£o de threads
                aer_config = optimizer.config.get("aer", {})
                max_threads = aer_config.get("max_parallel_threads", None)
                
                if max_threads is not None:
                    simulator = AerSimulator(max_parallel_threads=max_threads)
                else:
                    simulator = AerSimulator()
                    
                transpiled = transpile(circuit, simulator)
                job = simulator.run(transpiled, shots=shots)
                counts = job.result().get_counts()
            
            # Converter para quasi_dist format
            total_shots = sum(counts.values())
            quasi_dist = {int(bitstring, 2): count/total_shots for bitstring, count in counts.items()}
            return quasi_dist
        
        cost_value = objective_function_with_constraints(params, estimator, ansatz, cost_hamiltonian, simple_sampler)
        
        # Formatar par√¢metros para exibi√ß√£o (limitando a 6 par√¢metros para n√£o poluir)
        if len(params) <= 6:
            params_str = ", ".join([f"{p:6.3f}" for p in params])
        else:
            # Mostrar apenas os primeiros 3 e √∫ltimos 3
            params_str = ", ".join([f"{p:6.3f}" for p in params[:3]]) + " ... " + ", ".join([f"{p:6.3f}" for p in params[-3:]])
        
        # Armazenar hist√≥rico para plotagem
        cost_history.append(cost_value)
        # Capturar trajet√≥ria Œ≥/Œ≤ por camada nesta avalia√ß√£o
        try:
            for l in range(n_layers):
                g_idx = gamma_indices[l] if l < len(gamma_indices) else -1
                b_idx = beta_indices[l] if l < len(beta_indices) else -1
                if g_idx != -1 and b_idx != -1 and g_idx < len(params) and b_idx < len(params):
                    gamma_history[l].append(float(params[g_idx]))
                    beta_history[l].append(float(params[b_idx]))
        except Exception:
            pass
        
        # Imprimir progresso da otimiza√ß√£o
        print(f"  Itera√ß√£o {iteration_count[0]:3d}: Custo = {cost_value:8.4f} | Params: [{params_str}]")
        
        return cost_value
    
    # Otimiza√ß√£o cl√°ssica dos par√¢metros
    optimizer_method = optimizer.config["qaoa"]["optimizer"]
    print(f"Iniciando otimiza√ß√£o dos par√¢metros usando {optimizer_method}...")
    
    # Chute inicial: ranges f√≠sicos separados para Œ≥ e Œ≤
    n_layers = optimizer.config["qaoa"]["layers"]
    
    # Ranges separados (backward compatibility)
    qaoa_config = optimizer.config["qaoa"]
    
    # Gamma range (cost parameters)
    if "gamma_range" in qaoa_config:
        gamma_range_str = qaoa_config["gamma_range"]
    else:
        # Fallback: usar initial_param_range ou padr√£o f√≠sico
        gamma_range_str = qaoa_config.get("initial_param_range", "2*pi")
    
    # Beta range (mixing parameters)  
    if "beta_range" in qaoa_config:
        beta_range_str = qaoa_config["beta_range"]
    else:
        # Fallback: usar initial_param_range ou padr√£o f√≠sico
        beta_range_str = qaoa_config.get("initial_param_range", "pi")
    
    # Converter strings para valores num√©ricos
    gamma_range = eval(gamma_range_str.replace("pi", "np.pi"))
    beta_range = eval(beta_range_str.replace("pi", "np.pi"))
    
    # CORRE√á√ÉO CR√çTICA: Usar binding por dicion√°rio para evitar problemas de ordem
    # Extrair par√¢metros expl√≠citos do ansatz
    circuit_params = list(ansatz.parameters)
    
    # Identificar gammas e betas do circuito
    gammas = [p for p in circuit_params if 'gamma' in str(p)]
    betas = [p for p in circuit_params if 'beta' in str(p)]
    
    # Ordenar para garantir sequ√™ncia correta
    gammas.sort(key=lambda p: int(str(p).split('_')[1]))
    betas.sort(key=lambda p: int(str(p).split('_')[1])) 
    
    print(f"Par√¢metros detectados no circuito:")
    print(f"  ‚Ä¢ Gammas: {[str(g) for g in gammas]}")
    print(f"  ‚Ä¢ Betas: {[str(b) for b in betas]}")
    
    print(f"Ranges configurados:")
    print(f"  ‚Ä¢ Œ≥ range: [0, {gamma_range:.3f}] = [0, {gamma_range/np.pi:.2f}œÄ]")
    print(f"  ‚Ä¢ Œ≤ range: [0, {beta_range:.3f}] = [0, {beta_range/np.pi:.2f}œÄ]")
    print(f"Valores iniciais (ordem do circuito):")
    
    # CORRE√á√ÉO: Gerar initial_params na ordem EXATA do circuito (robusto)
    initial_params = []
    for param in circuit_params:
        if 'gamma' in str(param):
            # Par√¢metro Œ≥: usar gamma_range
            val = np.random.uniform(0, gamma_range)
            initial_params.append(val)
            print(f"    {param}: {val:.3f} (Œ≥ range)")
        elif 'beta' in str(param):
            # Par√¢metro Œ≤: usar beta_range  
            val = np.random.uniform(0, beta_range)
            initial_params.append(val)
            print(f"    {param}: {val:.3f} (Œ≤ range)")
        else:
            print(f"    ‚ùå UNKNOWN PARAM: {param}")
    
    initial_params = np.array(initial_params)
    print(f"Array final (ordem do circuito): {[f'{p:.3f}' for p in initial_params]}")

    # Mapear √≠ndices de Œ≥_l e Œ≤_l na ordem do vetor de par√¢metros (ordem do circuito)
    gamma_indices = [-1] * n_layers
    beta_indices = [-1] * n_layers
    for idx, param in enumerate(circuit_params):
        name = str(param)
        if 'gamma_' in name:
            l = int(name.split('_')[1])
            if 0 <= l < n_layers:
                gamma_indices[l] = idx
        elif 'beta_' in name:
            l = int(name.split('_')[1])
            if 0 <= l < n_layers:
                beta_indices[l] = idx
    # Preparar hist√≥rico dos par√¢metros
    gamma_history = [[] for _ in range(n_layers)]
    beta_history = [[] for _ in range(n_layers)]
    
    # Otimizar usando algoritmo configurado
    optimizer_method = optimizer.config["qaoa"]["optimizer"]
    
    # Carregar op√ß√µes espec√≠ficas do otimizador do config
    base_options = {}
    if "optimizer_options" in optimizer.config["qaoa"]:
        base_options = optimizer.config["qaoa"]["optimizer_options"].copy()
        print(f"Usando op√ß√µes personalizadas: {base_options}")
    
    # Aplicar op√ß√µes padr√£o se n√£o especificadas
    if optimizer_method in ['L-BFGS-B', 'BFGS']:
        # Para algoritmos baseados em gradiente, usar maxfun como padr√£o
        if 'maxfun' not in base_options and 'maxiter' not in base_options:
            base_options['maxfun'] = max_iter
    else:
        # Para outros algoritmos, usar maxiter como padr√£o  
        if 'maxiter' not in base_options:
            base_options['maxiter'] = max_iter
    
    print(f"Op√ß√µes finais do otimizador: {base_options}")

    # Capturar rhobeg efetivo (se aplic√°vel)
    rhobeg_used = None
    if optimizer_method.upper() == 'COBYLA':
        rhobeg_used = base_options.get('rhobeg', None)
    
    result = minimize(cost_function, initial_params, method=optimizer_method, 
                     options=base_options)
    
    print(f"Otimiza√ß√£o conclu√≠da em {result.nfev} avalia√ß√µes")
    print(f"Valor √≥timo encontrado: {result.fun}")
    
    # Executar circuito final para obter distribui√ß√£o
    # CORRE√á√ÉO FINAL: Converter vetor √≥timo para dicion√°rio antes de bindar
    optimal_param_dict = params_array_to_dict(result.x, ansatz)
    print(f"Par√¢metros √≥timos encontrados:")
    for param, val in optimal_param_dict.items():
        param_type = "Œ≥" if 'gamma' in str(param) else "Œ≤"
        print(f"  {param}: {val:.3f} ({param_type})")
    
    final_circuit = ansatz.assign_parameters(optimal_param_dict)
    final_circuit.measure_all()
    
    if use_ibm_quantum:
        # Executar no hardware IBM
        from qiskit import transpile
        from qiskit_ibm_runtime import SamplerV2
        
        sampler = SamplerV2(mode=backend)
        opt_level = ibm_config.get('transpilation', {}).get('optimization_level', 3)
        transpiled_circuit = transpile(final_circuit, backend, optimization_level=opt_level)
        
        print(f"üöÄ Executando circuito final no {backend.name}...")
        job = sampler.run([transpiled_circuit], shots=shots)
        result_final = job.result()
        counts = result_final[0].data.meas.get_counts()
        
    else:
        # Simular localmente
        from qiskit_aer import AerSimulator
        from qiskit import transpile
        
        # Configurar n√∫mero de threads do AER se especificado
        aer_config = optimizer.config.get("aer", {})
        max_threads = aer_config.get("max_parallel_threads", None)
        
        if max_threads is not None:
            simulator = AerSimulator(max_parallel_threads=max_threads)
        else:
            simulator = AerSimulator()
            
        transpiled_circuit = transpile(final_circuit, simulator)
        job = simulator.run(transpiled_circuit, shots=shots)
        counts = job.result().get_counts()
    
    # Calcular tempo total de execu√ß√£o
    execution_time = time.time() - start_time
    
    return counts, result.fun, cost_history, execution_time, {"gamma_history": gamma_history, "beta_history": beta_history, "rhobeg": rhobeg_used}



# 6. FUN√á√ÉO analyze_results COM VALIDA√á√ÉO DE RESTRI√á√ïES E RANKING
def analyze_results(counts):
    """Analisa os resultados do QAOA com valida√ß√£o de restri√ß√µes"""
    print("\n" + "="*50)
    print("RESULTADOS DO QAOA")
    print("="*50)
    
    # Encontrar a melhor solu√ß√£o
    best_bitstring = max(counts, key=counts.get)
    best_count = counts[best_bitstring]
    best_probability = best_count / sum(counts.values())
    
    print(f"\nMelhor solu√ß√£o encontrada: {best_bitstring}")
    print(f"Probabilidade: {best_probability:.3f} ({best_count}/1024 medi√ß√µes)")
    
    # Converter para formato de grid
    solution = bitstring_to_grid(best_bitstring)
    display_grid(solution, optimizer, "MELHOR CONFIGURA√á√ÉO")
    
    # NOVO: Validar restri√ß√µes de forma destacada
    violations = validate_constraints(solution, optimizer)
    print(f"\nüéØ VERIFICA√á√ÉO DE RESTRI√á√ïES:")
    for violation in violations:
        print(f"   {violation}")
    
    # Mostrar penalidades efetivas
    total_penalty = show_active_penalties(solution, wake_penalties, positions_coords)
    
    # M√©tricas detalhadas
    installed_positions = [i for i in range(optimizer.n_positions) if solution[i] == 1]
    total_score = sum(solution[i] * score[i] for i in range(optimizer.n_positions))
    num_turbines = len(installed_positions)
    
    print(f"\nüìä M√âTRICAS DETALHADAS:")
    print(f"   ‚Ä¢ Turbinas instaladas: {num_turbines}")
    
    # Mostrar status das restri√ß√µes
    if optimizer.enforce_constraints:
        print(f"   ‚Ä¢ Restri√ß√£o m√≠nima: {optimizer.min_turbines} (diferen√ßa: {num_turbines - optimizer.min_turbines:+d})")
        print(f"   ‚Ä¢ Restri√ß√£o m√°xima: {optimizer.max_turbines} (diferen√ßa: {optimizer.max_turbines - num_turbines:+d})")
        
        # Calcular penalidade por viola√ß√£o de restri√ß√µes
        constraint_penalty = 0
        if num_turbines < optimizer.min_turbines:
            constraint_penalty += optimizer.constraint_penalty * (optimizer.min_turbines - num_turbines)
        if num_turbines > optimizer.max_turbines:
            constraint_penalty += optimizer.constraint_penalty * (num_turbines - optimizer.max_turbines)
        
        if constraint_penalty > 0:
            print(f"   ‚Ä¢ Penalidade por restri√ß√µes: {constraint_penalty}")
    else:
        print(f"   ‚Ä¢ Sem restri√ß√µes de n√∫mero")
    
    print(f"   ‚Ä¢ Score total: {total_score:.2f}")
    print(f"   ‚Ä¢ Penalidades de esteira: {total_penalty:.2f}")
    net_score = total_score - total_penalty
    if optimizer.enforce_constraints and constraint_penalty > 0:
        net_score -= constraint_penalty
        print(f"   ‚Ä¢ Score l√≠quido final: {net_score:.2f} (descontando restri√ß√µes)")
    else:
        print(f"   ‚Ä¢ Score l√≠quido: {net_score:.2f}")
    
    # Mostrar produ√ß√£o por posi√ß√£o
    print(f"\n‚ö° PRODU√á√ÉO POR POSI√á√ÉO:")
    for i in range(optimizer.n_positions):
        row = i // optimizer.cols
        col = i % optimizer.cols
        status = "üå™Ô∏è" if solution[i] == 1 else "‚¨ú"
        sc = score[i] if solution[i] == 1 else 0
        print(f"   Pos ({row},{col}): {status} Score: {sc:.1f}")
        
    # Top 5 solu√ß√µes com visualiza√ß√£o
    print(f"\nüèÜ TOP 5 SOLU√á√ïES MAIS PROV√ÅVEIS:")
    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)
    for i, (bitstring, count) in enumerate(sorted_counts[:5]):
        prob = count / sum(counts.values())
        value = evaluate_solution(bitstring, score, wake_penalties, optimizer)
        sol = bitstring_to_grid(bitstring)
        
        # Formato compacto do grid
        if optimizer.rows == 2 and optimizer.cols == 3:
            grid_compact = f"[{sol[0]}{sol[1]}{sol[2]}|{sol[3]}{sol[4]}{sol[5]}]"
        else:
            # Para grids maiores, mostrar apenas as posi√ß√µes ativas
            active_pos = [str(i) for i in range(optimizer.n_positions) if sol[i] == 1]
            grid_compact = f"[{','.join(active_pos) if active_pos else 'vazio'}]"
        
        print(f"   {i+1}. {grid_compact} - {prob:.3f} - Score: {value:.2f}")
        
        # Mostrar grid completo apenas para as 3 melhores
        if i < 3:
            display_grid(sol, optimizer, f"Solu√ß√£o #{i+1}")
            
    # Resumo final com destaque para restri√ß√µes
    print(f"\n" + "="*50)
    print(f"RESUMO FINAL")
    print(f"="*50)
    if optimizer.enforce_constraints:
        if num_turbines < optimizer.min_turbines or num_turbines > optimizer.max_turbines:
            print(f"‚ö†Ô∏è  ATEN√á√ÉO: Solu√ß√£o VIOLA restri√ß√µes!")
            print(f"   Exigido: [{optimizer.min_turbines}, {optimizer.max_turbines}] turbinas")
            print(f"   Encontrado: {num_turbines} turbinas")
        else:
            print(f"‚úÖ Solu√ß√£o respeita todas as restri√ß√µes!")
            print(f"   {num_turbines} turbinas dentro do intervalo [{optimizer.min_turbines}, {optimizer.max_turbines}]")
    else:
        print(f"‚ÑπÔ∏è  Execu√ß√£o sem restri√ß√µes de n√∫mero de turbinas")
    print(f"üèÜ Score l√≠quido final: {net_score:.2f}")


# Executar a otimiza√ß√£o apenas se executado diretamente
if __name__ == "__main__":
    # Primeiro processar argumentos
    args = parse_arguments()
    # Ajustar flag global para fun√ß√µes utilit√°rias
    PLOT_ENABLED = bool(getattr(args, 'plot', False))
    
    # Se solicitado, listar configura√ß√µes e sair
    if args.list_configs:
        list_available_configs()
        sys.exit(0)
    
    # Inicializar com configura√ß√£o especificada
    optimizer = QAOATurbineOptimizer(args.config)
    score = optimizer.score
    wake_penalties = optimizer.wake_penalties
    
    # Se solicitado benchmark, executar e sair
    if args.benchmark_hamiltonian:
        compare_hamiltonian_implementations()
        sys.exit(0)
    
    # Verificar se IBM Quantum foi solicitado
    use_ibm = args.ibm_quantum
    if use_ibm:
        # Confirmar execu√ß√£o no IBM Quantum
        if not confirm_ibm_execution(optimizer.config):
            sys.exit(0)
    
    print(f"\nüöÄ INICIANDO OTIMIZA√á√ÉO QAOA...")
    print(f"\nüìã RESUMO DAS RESTRI√á√ïES:")
    if optimizer.enforce_constraints:
        print(f"   üéØ N√∫mero EXATO de turbinas requerido: {optimizer.min_turbines}")
        print(f"   ‚ö†Ô∏è  Viola√ß√µes ser√£o penalizadas com fator {optimizer.constraint_penalty}")
        print(f"   üîç O QAOA deve encontrar exatamente {optimizer.min_turbines} turbinas")
    else:
        print(f"   üÜì SEM restri√ß√µes - qualquer n√∫mero de turbinas √© v√°lido")
        print(f"   üìä Intervalo permitido: 0 a {optimizer.n_positions} turbinas")
    
    try:
        # Usar par√¢metros QAOA da configura√ß√£o
        p_layers = optimizer.config["qaoa"]["layers"]
        max_iterations = optimizer.config["qaoa"].get("optimizer_options", {}).get("maxiter", 50)
        print(f"\nüîß QAOA: {p_layers} camadas, {max_iterations} itera√ß√µes do otimizador")
        
        # Executar QAOA
        counts, optimal_value, cost_history, execution_time, param_hist = run_qaoa(p=p_layers, max_iter=max_iterations, use_ibm_quantum=use_ibm, args=args, config_file=args.config)
        
        # Gerar gr√°ficos somente se --plot for passado
        if getattr(args, 'plot', False):
            cfg_name = optimizer.config.get('grid', {}).get('description', args.config)
            rhobeg_used = param_hist.get('rhobeg')
            plot_cost_evolution(cost_history, cfg_name, rhobeg=rhobeg_used)
            plot_gamma_beta_trajectory(param_hist.get('gamma_history', []), param_hist.get('beta_history', []), cfg_name, rhobeg=rhobeg_used)
            
            # Gerar visualiza√ß√£o do grid mais prov√°vel
            best_bitstring = max(counts, key=counts.get)
            best_probability = counts[best_bitstring] / sum(counts.values())
            solution = bitstring_to_grid(best_bitstring)
            
            # Calcular scores para a visualiza√ß√£o
            total_score = sum(solution[i] * optimizer.score[i] for i in range(optimizer.n_positions))
            wake_penalty = sum(solution[i] * solution[j] * penalty 
                             for (i, j), penalty in optimizer.wake_penalties.items())
            
            create_grid_visualization(solution, optimizer, args.config, 
                                    best_probability, total_score, wake_penalty)
        
        analyze_results(counts)
        
        # Log dos resultados
        best_bitstring = max(counts, key=counts.get)
        log_simulation_results(
            config=optimizer.config, 
            config_file=args.config, 
            optimal_value=optimal_value,
            best_bitstring=best_bitstring,
            cost_history=cost_history, 
            counts=counts,
            execution_time=execution_time
        )
        
    except Exception as e:
        print(f"‚ùå ERRO DETALHADO NA EXECU√á√ÉO DO QAOA:")
        print(f"   ‚Ä¢ Tipo do erro: {type(e).__name__}")
        print(f"   ‚Ä¢ Mensagem: {str(e)}")
        
        # Mostrar traceback completo para debug
        import traceback
        print(f"   ‚Ä¢ Stack trace:")
        traceback.print_exc()
        
        print("\nüíî Execu√ß√£o interrompida devido ao erro.")
        sys.exit(1)
